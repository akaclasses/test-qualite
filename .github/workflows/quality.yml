name: Code Quality

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  quality:
    runs-on: ubuntu-latest
    
    services:
      sonarqube:
        image: sonarqube:10.1-community
        ports:
          - 9000:9000
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install pytest pytest-cov

    - name: Run tests with coverage
      run: |
        pytest --cov=src --cov-report=xml

    - name: Wait for SonarQube
      run: |
        timeout 300 bash -c 'until curl -s http://localhost:9000/api/system/status | grep -q "UP"; do sleep 5; done'

    - name: SonarQube Scan
      run: |
        wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
        unzip -q sonar-scanner-cli-4.8.0.2856-linux.zip
        ./sonar-scanner-4.8.0.2856-linux/bin/sonar-scanner \
          -Dsonar.projectKey=python-demo \
          -Dsonar.projectName="Python Quality Demo" \
          -Dsonar.sources=src \
          -Dsonar.tests=tests \
          -Dsonar.python.coverage.reportPaths=coverage.xml \
          -Dsonar.host.url=http://localhost:9000 \
          -Dsonar.login=admin \
          -Dsonar.password=admin

    - name: Wait for analysis completion
      run: |
        sleep 30

    - name: Generate SonarQube report
      run: |
        mkdir -p sonar-reports
        
        # Récupération des métriques principales
        curl -u admin:admin "http://localhost:9000/api/measures/component?component=python-demo&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density,ncloc,complexity" > sonar-reports/metrics.json
        
        # Récupération des issues
        curl -u admin:admin "http://localhost:9000/api/issues/search?componentKeys=python-demo" > sonar-reports/issues.json
        
        # Génération d'un rapport HTML simple
        cat > sonar-reports/report.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>SonarQube Analysis Report</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .metric { display: inline-block; margin: 10px; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
                .bugs { background-color: #ffebee; }
                .vulnerabilities { background-color: #fff3e0; }
                .code_smells { background-color: #f3e5f5; }
                .coverage { background-color: #e8f5e8; }
            </style>
        </head>
        <body>
            <h1>📊 SonarQube Analysis Report</h1>
            <p><em>Generated on: $(date)</em></p>
            
            <h2>🔍 Key Metrics</h2>
            <p>Download the JSON files for detailed metrics and issues.</p>
            
            <div class="metric bugs">
                <h3>🐛 Bugs</h3>
                <p>Check metrics.json for count</p>
            </div>
            
            <div class="metric vulnerabilities">
                <h3>🔒 Vulnerabilities</h3>
                <p>Check metrics.json for count</p>
            </div>
            
            <div class="metric code_smells">
                <h3>🧹 Code Smells</h3>
                <p>Check metrics.json for count</p>
            </div>
            
            <div class="metric coverage">
                <h3>📈 Coverage</h3>
                <p>Check metrics.json for percentage</p>
            </div>
            
            <h2>📋 Files Generated</h2>
            <ul>
                <li><strong>metrics.json</strong> - Key quality metrics</li>
                <li><strong>issues.json</strong> - Detailed list of all issues found</li>
            </ul>
        </body>
        </html>
        EOF

    - name: Upload SonarQube reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sonar-analysis-report
        path: sonar-reports/